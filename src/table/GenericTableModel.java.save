package table;

import java.util.*;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.SwingUtilities;

public class GenericTableModel extends AbstractTableModel {
	protected String[] columnNames;
	protected List     rows;
	protected String   leadColumn;
	
	public GenericTableModel(String[] columnNames, String leadColumn, int anticipatedSize) {
		this.columnNames = columnNames;
		this.leadColumn  = leadColumn;
		rows = new ArrayList(anticipatedSize);
	}

	public Object getSelectedValue(JTable t) {
		synchronized (this) {
			int row = t.getSelectedRow();
			if (row == -1)
				return null;

			row = t.convertRowIndexToModel(row);
			if (row == -1)
				return null;

			return ( (Map)rows.get(row) ).get(leadColumn);
			}
	}

	public String getColumnName(int x) {
		return columnNames[x];
	}

	public int getColumnCount() {
		return columnNames.length;
	}

	public void addEntry(final Map row) {
		if (SwingUtilities.isEventDispatchThread())
			_addEntry(row);
		else 
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					_addEntry(row);
				}
			});
	}

	public void clear(final int newSize) {
		if (SwingUtilities.isEventDispatchThread())
			_clear(newSize);
		else 
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					_clear(newSize);
				}
			});
	}

	public void fireListeners() {
		if (SwingUtilities.isEventDispatchThread())
			fireTableDataChanged();
		else 
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					fireTableDataChanged();
				}
			});
	}
	
	public void _addEntry(Map row) {
		int size;	
		synchronized (this) {
			rows.add(row);
			size = rows.size() - 1;
		}
	}

	public void _clear(int anticipatedSize) {
		synchronized (this) {
			rows = new ArrayList(anticipatedSize);
		}
	}

	public int getRowCount() {
		synchronized (this) {
			return rows.size();
		}
	}

	public Object getValueAt(int row, int col) {
		synchronized (this) {
			Map temp = (Map)rows.get(row);
			return temp.get(getColumnName(col));
		}
	}
}
